# Picking hello.zip apart

Our first objective is to parse and interpret the following "Hello, world" program.

Note that we are approaching Zig with an almost black box -like approach. I don't even
know Zig-specific terms for bunch of stuff. If we use slightly odd terminology here, consider
it as a weird feature instead of a bug.

```
const std = @import("std");

pub fn main() !void {
    const stdout = std.io.getStdOut().writer();
    try stdout.print("Hello, {s}!\n", .{"world"});
}
```

We are building our interpreter gradually, so we need only minimal amount of features that
a full-blown Zig program would need.

Let's examine the structure of the program.

First, we have a file-level, global scope. That scope can have something we call "items".
In hello.zig, we have a constant defining "const item" and a function defining "fn item."
Besides the category of the item,
items have generally an identifier, or an ident for short.
The identifiers belong to global
namespace, so we also have a concept of a namespace.
The identifiers also have a visibility
marker ("pub") but we are going to ignore it because we don't need it yet.

Const items are statements, and specifically, assignment statements. Such statements also
have the assigned value. The value is expressed by a value expression.
Each statement ends with a semicolon.

Fn items have, after the identifier, an argument tuple.
We are going to ignore that, because in hello.zig, "main" takes no arguments.
After the argument tuple, we

- item
  - const item
  - fn item
- ident
- namespace
- statement
    - assignment statement
- value expression


